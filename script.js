// Configura√ß√£o e inicializa√ß√£o do Firebase
// Aguarda o carregamento completo da p√°gina e inicializa√ß√£o do Firebase
function initializeApp() {
  // Verifica se o Firebase foi inicializado
  if (typeof window.firebaseAuth === 'undefined') {
    console.error('Firebase n√£o foi inicializado corretamente')
    return
  }

  // Refer√™ncias do Firebase
  const auth = window.firebaseAuth
  const db = window.firebaseDb
  const googleProvider = window.googleProvider
  const signInWithEmailAndPassword = window.signInWithEmailAndPassword
  const signInWithPopup = window.signInWithPopup
  const onAuthStateChanged = window.onAuthStateChanged
  const signOut = window.signOut
  const doc = window.doc
  const getDoc = window.getDoc

  console.log('Firebase inicializado com sucesso!')
  console.log('Auth:', auth)
  console.log('Firestore:', db)

  // Refer√™ncias aos elementos do formul√°rio
  const loginForm = document.getElementById('loginForm')
  const emailInput = document.getElementById('email')
  const senhaInput = document.getElementById('senha')
  const btnEntrar = document.querySelector('.btn-entrar')
  const btnGoogle = document.getElementById('btnGoogle')

  // Refer√™ncias aos elementos da aplica√ß√£o
  const loginContainer = document.querySelector('.login-container')
  const appDiv = document.getElementById('app')
  const sidebar = document.getElementById('sidebar')
  const userEmailSpan = document.getElementById('userEmail')
  const userPhotoImg = document.getElementById('userPhoto')
  const btnLogout = document.getElementById('btnLogout')

  // Fun√ß√£o para mostrar mensagem de erro/sucesso
  function mostrarMensagem(texto, tipo = 'erro') {
    // Remove mensagens anteriores
    const mensagemExistente = document.querySelector('.mensagem-login')
    if (mensagemExistente) {
      mensagemExistente.remove()
    }

    // Cria nova mensagem
    const mensagem = document.createElement('div')
    mensagem.className = `mensagem-login ${tipo}`
    mensagem.textContent = texto
    mensagem.style.cssText = `
      padding: 12px 16px;
      margin: 15px 0;
      border-radius: 8px;
      font-size: 14px;
      font-weight: 500;
      text-align: center;
      ${
        tipo === 'erro'
          ? 'background-color: #fed7d7; color: #c53030; border: 1px solid #feb2b2;'
          : 'background-color: #c6f6d5; color: #2f855a; border: 1px solid #9ae6b4;'
      }
    `

    // Insere a mensagem ap√≥s o formul√°rio
    loginForm.parentNode.insertBefore(mensagem, loginForm.nextSibling)

    // Remove a mensagem ap√≥s 5 segundos
    setTimeout(() => {
      if (mensagem.parentNode) {
        mensagem.remove()
      }
    }, 5000)
  }

  // Fun√ß√£o para alternar estado de loading dos bot√µes
  function toggleLoading(button, isLoading) {
    if (isLoading) {
      button.disabled = true
      button.style.opacity = '0.6'
      button.style.cursor = 'not-allowed'

      // Adiciona spinner se for o bot√£o de entrar
      if (button.classList.contains('btn-entrar')) {
        button.innerHTML =
          '<span style="display: inline-block; width: 16px; height: 16px; border: 2px solid #ffffff; border-top: 2px solid transparent; border-radius: 50%; animation: spin 1s linear infinite; margin-right: 8px;"></span>Entrando...'
      }
    } else {
      button.disabled = false
      button.style.opacity = '1'
      button.style.cursor = 'pointer'

      // Restaura texto original
      if (button.classList.contains('btn-entrar')) {
        button.innerHTML = 'Entrar'
      }
    }
  }

  // Adiciona anima√ß√£o de spinner
  const style = document.createElement('style')
  style.textContent = `
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
  `
  document.head.appendChild(style)

  // Fun√ß√£o para fazer login com email e senha
  async function fazerLoginEmailSenha(email, senha) {
    try {
      const userCredential = await signInWithEmailAndPassword(
        auth,
        email,
        senha
      )
      const user = userCredential.user

      console.log('Login realizado com sucesso:', user)
      mostrarMensagem(`Bem-vindo, ${user.email}!`, 'sucesso')

      // Limpar formul√°rio
      emailInput.value = ''
      senhaInput.value = ''

      // Redirecionar para dashboard (implementar depois)
      // window.location.href = '/dashboard.html'

      return user
    } catch (error) {
      console.error('Erro no login:', error)

      // Tratar diferentes tipos de erro
      let mensagemErro = 'Erro ao fazer login. Verifique suas credenciais.'

      switch (error.code) {
        case 'auth/user-not-found':
          mensagemErro = 'Usu√°rio n√£o encontrado. Verifique o email.'
          break
        case 'auth/wrong-password':
          mensagemErro = 'Senha incorreta.'
          break
        case 'auth/invalid-email':
          mensagemErro = 'Email inv√°lido.'
          break
        case 'auth/user-disabled':
          mensagemErro = 'Esta conta foi desabilitada.'
          break
        case 'auth/too-many-requests':
          mensagemErro = 'Muitas tentativas. Tente novamente mais tarde.'
          break
        case 'auth/network-request-failed':
          mensagemErro = 'Erro de conex√£o. Verifique sua internet.'
          break
      }

      mostrarMensagem(mensagemErro, 'erro')
      throw error
    }
  }

  // Event listener para o formul√°rio de login
  loginForm.addEventListener('submit', async function (e) {
    e.preventDefault()

    const email = emailInput.value.trim()
    const senha = senhaInput.value

    // Valida√ß√£o b√°sica
    if (!email || !senha) {
      mostrarMensagem('Por favor, preencha todos os campos.', 'erro')
      return
    }

    if (!email.includes('@')) {
      mostrarMensagem('Por favor, insira um email v√°lido.', 'erro')
      return
    }

    // Ativa estado de loading
    toggleLoading(btnEntrar, true)

    try {
      await fazerLoginEmailSenha(email, senha)
    } catch (error) {
      // Erro j√° tratado na fun√ß√£o fazerLoginEmailSenha
    } finally {
      toggleLoading(btnEntrar, false)
    }
  })

  // Fun√ß√£o para fazer login com Google
  async function fazerLoginGoogle() {
    try {
      const result = await signInWithPopup(auth, googleProvider)
      const user = result.user

      console.log('Login com Google realizado com sucesso:', user)
      mostrarMensagem(
        `Bem-vindo, ${user.displayName || user.email}!`,
        'sucesso'
      )

      // Redirecionar para dashboard (implementar depois)
      // window.location.href = '/dashboard.html'

      return user
    } catch (error) {
      console.error('Erro no login com Google:', error)

      // Tratar diferentes tipos de erro
      let mensagemErro = 'Erro ao fazer login com Google.'

      switch (error.code) {
        case 'auth/popup-closed-by-user':
          mensagemErro = 'Login cancelado pelo usu√°rio.'
          break
        case 'auth/popup-blocked':
          mensagemErro =
            'Popup bloqueado pelo navegador. Permita popups para este site.'
          break
        case 'auth/cancelled-popup-request':
          mensagemErro = 'Login cancelado.'
          break
        case 'auth/account-exists-with-different-credential':
          mensagemErro =
            'J√° existe uma conta com este email usando outro m√©todo de login.'
          break
        case 'auth/operation-not-allowed':
          mensagemErro = 'Login com Google n√£o est√° habilitado.'
          break
        case 'auth/network-request-failed':
          mensagemErro = 'Erro de conex√£o. Verifique sua internet.'
          break
      }

      mostrarMensagem(mensagemErro, 'erro')
      throw error
    }
  }

  // Event listener para o formul√°rio de login
  loginForm.addEventListener('submit', async function (e) {
    e.preventDefault()

    const email = emailInput.value.trim()
    const senha = senhaInput.value.trim()

    if (!email || !senha) {
      mostrarMensagem('Por favor, preencha todos os campos.', 'erro')
      return
    }

    toggleLoading(btnEntrar, true)

    try {
      await fazerLoginEmailSenha(email, senha)
    } catch (error) {
      // Erro j√° tratado na fun√ß√£o fazerLoginEmailSenha
    } finally {
      toggleLoading(btnEntrar, false)
    }
  })

  // Event listener para o bot√£o do Google
  btnGoogle.addEventListener('click', async function () {
    toggleLoading(btnGoogle, true)

    try {
      await fazerLoginGoogle()
    } catch (error) {
      // Erro j√° tratado na fun√ß√£o fazerLoginGoogle
    } finally {
      toggleLoading(btnGoogle, false)
    }
  })

  // Fun√ß√£o para anima√ß√£o de entrada dos elementos
  function animarEntrada() {
    const elementos = document.querySelectorAll('.login-box > *')

    elementos.forEach((elemento, index) => {
      elemento.style.opacity = '0'
      elemento.style.transform = 'translateY(20px)'

      setTimeout(() => {
        elemento.style.transition = 'opacity 0.6s ease, transform 0.6s ease'
        elemento.style.opacity = '1'
        elemento.style.transform = 'translateY(0)'
      }, index * 100)
    })
  }

  // Fun√ß√£o para renderizar dashboard do usu√°rio
  function renderizarDashboardUsuario() {
    const contentBody = document.querySelector('.content-body')
    contentBody.innerHTML = `
      <div class="welcome-message">
        <h2>Bem-vindo ao seu Dashboard!</h2>
        <p>Gerencie suas reservas e explore os espa√ßos dispon√≠veis</p>
      </div>
      
      <div class="dashboard-sections">
        <div class="section-card">
          <div class="section-icon">üìÖ</div>
          <h3>Nova Reserva</h3>
          <p>Agende um novo hor√°rio em nossos espa√ßos</p>
          <button class="section-btn">Fazer Reserva</button>
        </div>
        
        <div class="section-card">
          <div class="section-icon">üìã</div>
          <h3>Minhas Reservas</h3>
          <p>Visualize e gerencie suas reservas ativas</p>
          <button class="section-btn">Ver Reservas</button>
        </div>
        
        <div class="section-card">
          <div class="section-icon">üìç</div>
          <h3>Localidade</h3>
          <p>Explore os espa√ßos dispon√≠veis na sua regi√£o</p>
          <button class="section-btn">Explorar</button>
        </div>
        
        <div class="section-card">
          <div class="section-icon">‚è∞</div>
          <h3>Reservas Recentes</h3>
          <p>Veja suas √∫ltimas atividades e reservas</p>
          <button class="section-btn">Ver Hist√≥rico</button>
        </div>
      </div>
      
      <div class="quick-stats">
        <h3>Resumo R√°pido</h3>
        <div class="stats-grid">
          <div class="stat-item">
            <span class="stat-number">3</span>
            <span class="stat-label">Reservas Ativas</span>
          </div>
          <div class="stat-item">
            <span class="stat-number">12</span>
            <span class="stat-label">Total Reservas</span>
          </div>
          <div class="stat-item">
            <span class="stat-number">2</span>
            <span class="stat-label">Espa√ßos Favoritos</span>
          </div>
        </div>
      </div>
    `
  }

  // Fun√ß√£o para renderizar dashboard do administrador
  function renderizarDashboardAdmin() {
    const contentBody = document.querySelector('.content-body')
    contentBody.innerHTML = `
      <div class="welcome-message">
        <h2>Painel Administrativo</h2>
        <p>Gerencie espa√ßos, usu√°rios e monitore o desempenho do sistema</p>
      </div>
      
      <div class="admin-cards">
        <div class="admin-card">
          <div class="card-header">
            <h3>Espa√ßos Ativos</h3>
            <div class="card-icon">üè¢</div>
          </div>
          <div class="card-content">
            <span class="card-number">15</span>
            <p class="card-description">Espa√ßos dispon√≠veis para reserva</p>
            <div class="card-trend positive">+2 este m√™s</div>
          </div>
        </div>
        
        <div class="admin-card">
          <div class="card-header">
            <h3>Reservas Hoje</h3>
            <div class="card-icon">üìÖ</div>
          </div>
          <div class="card-content">
            <span class="card-number">28</span>
            <p class="card-description">Reservas confirmadas para hoje</p>
            <div class="card-trend positive">+15% vs ontem</div>
          </div>
        </div>
        
        <div class="admin-card">
          <div class="card-header">
            <h3>Taxa de Ocupa√ß√£o</h3>
            <div class="card-icon">üìä</div>
          </div>
          <div class="card-content">
            <span class="card-number">78%</span>
            <p class="card-description">Ocupa√ß√£o m√©dia dos espa√ßos</p>
            <div class="card-trend positive">+5% este m√™s</div>
          </div>
        </div>
        
        <div class="admin-card">
          <div class="card-header">
            <h3>Usu√°rios Ativos</h3>
            <div class="card-icon">üë•</div>
          </div>
          <div class="card-content">
            <span class="card-number">342</span>
            <p class="card-description">Usu√°rios cadastrados no sistema</p>
            <div class="card-trend positive">+23 novos usu√°rios</div>
          </div>
        </div>
        
        <div class="admin-card">
          <div class="card-header">
            <h3>Receita Mensal</h3>
            <div class="card-icon">üí∞</div>
          </div>
          <div class="card-content">
            <span class="card-number">R$ 45.200</span>
            <p class="card-description">Faturamento do m√™s atual</p>
            <div class="card-trend positive">+12% vs m√™s anterior</div>
          </div>
        </div>
        
        <div class="admin-card">
          <div class="card-header">
            <h3>Reservas Canceladas</h3>
            <div class="card-icon">‚ùå</div>
          </div>
          <div class="card-content">
            <span class="card-number">8</span>
            <p class="card-description">Cancelamentos esta semana</p>
            <div class="card-trend negative">-3 vs semana anterior</div>
          </div>
        </div>
      </div>
      
      <div class="admin-sections">
        <div class="section-panel">
          <h3>Reservas Pendentes</h3>
          <div class="pending-list">
            <div class="pending-item">
              <span class="user-name">Jo√£o Silva</span>
              <span class="space-name">Sala de Reuni√£o A</span>
              <span class="time">14:00 - 16:00</span>
              <button class="btn-approve">Aprovar</button>
            </div>
            <div class="pending-item">
              <span class="user-name">Maria Santos</span>
              <span class="space-name">Audit√≥rio Principal</span>
              <span class="time">09:00 - 11:00</span>
              <button class="btn-approve">Aprovar</button>
            </div>
          </div>
        </div>
        
        <div class="section-panel">
          <h3>Espa√ßos Mais Populares</h3>
          <div class="popular-spaces">
            <div class="space-item">
              <span class="space-name">Sala de Reuni√£o A</span>
              <span class="reservation-count">45 reservas</span>
            </div>
            <div class="space-item">
              <span class="space-name">Audit√≥rio Principal</span>
              <span class="reservation-count">38 reservas</span>
            </div>
            <div class="space-item">
              <span class="space-name">Espa√ßo Coworking</span>
              <span class="reservation-count">32 reservas</span>
            </div>
          </div>
        </div>
      </div>
    `
  }

  // Fun√ß√£o para gerar menu lateral baseado no role
  function gerarMenuLateral(role) {
    let menuItems = []

    if (role === 'administrador') {
      menuItems = [
        { nome: 'Dashboard', ativo: true },
        { nome: 'Localidades', ativo: false },
        { nome: 'Configura√ß√µes', ativo: false },
        { nome: 'Usu√°rios', ativo: false },
        { nome: 'Relat√≥rios', ativo: false },
        { nome: 'Testes', ativo: false }
      ]
    } else {
      // role === 'usuario' ou qualquer outro valor
      menuItems = [
        { nome: 'Dashboard', ativo: true },
        { nome: 'Nova Reserva', ativo: false },
        { nome: 'Minhas Reservas', ativo: false },
        { nome: 'Localidade', ativo: false },
        { nome: 'Reservas Recentes', ativo: false }
      ]
    }

    const menuHTML = menuItems
      .map(
        item =>
          `<li><a href="#" class="menu-item ${
            item.ativo ? 'active' : ''
          }" data-page="${item.nome.toLowerCase().replace(/\s+/g, '-')}">${
            item.nome
          }</a></li>`
      )
      .join('')

    return `
      <div class="sidebar-header">
        <h2>Agendei</h2>
      </div>
      <ul class="sidebar-menu">
        ${menuHTML}
      </ul>
      <div class="sidebar-footer">
        <button id="btnLogout" class="btn-logout">Sair</button>
      </div>
    `
  }

  // Fun√ß√£o para configurar navega√ß√£o do menu
  function configurarNavegacaoMenu(role) {
    const menuItems = document.querySelectorAll('.menu-item')

    menuItems.forEach(item => {
      item.addEventListener('click', function (e) {
        e.preventDefault()

        // Remover classe active de todos os itens
        menuItems.forEach(menuItem => menuItem.classList.remove('active'))

        // Adicionar classe active ao item clicado
        this.classList.add('active')

        // Atualizar t√≠tulo do header
        const contentHeader = document.querySelector('.content-header h1')
        contentHeader.textContent = this.textContent

        // Renderizar conte√∫do baseado na p√°gina
        const page = this.getAttribute('data-page')

        if (page === 'dashboard') {
          if (role === 'administrador') {
            renderizarDashboardAdmin()
          } else {
            renderizarDashboardUsuario()
          }
        } else {
          // Para outras p√°ginas, mostrar mensagem tempor√°ria
          const contentBody = document.querySelector('.content-body')
          contentBody.innerHTML = `
            <div class="welcome-message">
              <h2>${this.textContent}</h2>
              <p>Esta funcionalidade ser√° implementada em breve!</p>
            </div>
            <div class="coming-soon">
              <div class="coming-soon-icon">üöß</div>
              <h3>Em Desenvolvimento</h3>
              <p>Estamos trabalhando para trazer esta funcionalidade o mais r√°pido poss√≠vel.</p>
            </div>
          `
        }
      })
    })
  }

  // Fun√ß√£o ass√≠ncrona para lidar com o login do usu√°rio
  async function handleLogin(user) {
    try {
      console.log('üîÑ Buscando dados do usu√°rio no Firestore...')

      // Buscar documento do usu√°rio na cole√ß√£o 'users'
      const userDocRef = doc(db, 'users', user.uid)
      const userDocSnap = await getDoc(userDocRef)

      let role = 'usuario' // Valor padr√£o

      if (userDocSnap.exists()) {
        const userData = userDocSnap.data()
        role = userData.role || 'usuario'
        console.log('üìÑ Dados do usu√°rio encontrados:', userData)
      } else {
        console.log(
          '‚ö†Ô∏è Documento do usu√°rio n√£o encontrado, usando role padr√£o'
        )
      }

      console.log(`üë§ Role do usu√°rio: ${role}`)

      // Gerar menu lateral baseado no role
      const menuHTML = gerarMenuLateral(role)
      sidebar.innerHTML = menuHTML

      // Atualizar informa√ß√µes do usu√°rio
      userEmailSpan.textContent = user.email || 'Usu√°rio'
      if (user.photoURL) {
        userPhotoImg.src = user.photoURL
        userPhotoImg.style.display = 'block'
      } else {
        userPhotoImg.style.display = 'none'
      }

      // Esconder tela de login e mostrar aplica√ß√£o
      loginContainer.classList.add('hidden')
      appDiv.classList.remove('hidden')

      // Adicionar classe ao body para ajustar estilos
      document.body.classList.add('app-loaded')

      console.log('‚úÖ Login processado com sucesso!')

      // Reconfigurar event listeners
      const novoBtnLogout = document.getElementById('btnLogout')
      if (novoBtnLogout) {
        novoBtnLogout.addEventListener('click', handleLogout)
      }

      // Adicionar event listeners para navega√ß√£o do menu
      configurarNavegacaoMenu(role)
    } catch (error) {
      console.error('‚ùå Erro ao processar login:', error)
      mostrarMensagem('Erro ao carregar dados do usu√°rio.', 'erro')
    }
  }

  // Fun√ß√£o para lidar com logout
  async function handleLogout() {
    try {
      await signOut(auth)
      console.log('üëã Logout realizado com sucesso')
    } catch (error) {
      console.error('‚ùå Erro no logout:', error)
      mostrarMensagem('Erro ao fazer logout.', 'erro')
    }
  }

  // Observador de estado de autentica√ß√£o
  onAuthStateChanged(auth, async user => {
    if (user) {
      // Usu√°rio est√° logado
      console.log('‚úÖ Usu√°rio logado:', {
        uid: user.uid,
        email: user.email,
        displayName: user.displayName,
        photoURL: user.photoURL,
        emailVerified: user.emailVerified
      })

      // Processar login do usu√°rio
      await handleLogin(user)
    } else {
      // Usu√°rio n√£o est√° logado
      console.log('‚ùå Usu√°rio n√£o est√° logado')

      // Esconder aplica√ß√£o e mostrar tela de login
      appDiv.classList.add('hidden')
      loginContainer.classList.remove('hidden')

      // Remover classe do body para voltar aos estilos de login
      document.body.classList.remove('app-loaded')

      // Limpar formul√°rio
      emailInput.value = ''
      senhaInput.value = ''
    }
  })

  // Inicia a anima√ß√£o de entrada
  animarEntrada()
}

// Aguardar o Firebase estar pronto
function waitForFirebase() {
  if (window.firebaseInitialized) {
    initializeApp()
  } else {
    setTimeout(waitForFirebase, 100)
  }
}

// Inicializar quando a p√°gina carregar
document.addEventListener('DOMContentLoaded', function () {
  waitForFirebase()
})

// Configura√ß√£o adicional do Firebase (dispon√≠vel globalmente)
window.firebaseConfig = {
  apiKey: 'AIzaSyANAle4qNIzqGjfLe7smp_AIfHaZlRditg',
  authDomain: 'agendei-sistema-de-reservas.firebaseapp.com',
  projectId: 'agendei-sistema-de-reservas',
  storageBucket: 'agendei-sistema-de-reservas.firebasestorage.app',
  messagingSenderId: '1086088433735',
  appId: '1:1086088433735:web:da8fedbde47173dcbc2162',
  measurementId: 'G-TLYFG33G4W'
}

// Fun√ß√£o de diagn√≥stico para verificar conex√£o com Firebase
async function checkFirebaseConnection() {
  console.log('üîç Iniciando verifica√ß√£o de conex√£o com Firebase...')

  try {
    // Verifica√ß√£o 1: Servi√ßo de Autentica√ß√£o
    console.log('üìã Verificando servi√ßo de autentica√ß√£o...')

    if (typeof window.firebaseAuth === 'undefined') {
      throw new Error('‚ùå Servi√ßo de autentica√ß√£o n√£o foi inicializado')
    }

    const auth = window.firebaseAuth
    const currentUser = auth.currentUser

    console.log('‚úÖ Servi√ßo de autentica√ß√£o OK')
    console.log(
      'üë§ Usu√°rio atual:',
      currentUser ? currentUser.email : 'Nenhum usu√°rio logado'
    )

    // Verifica√ß√£o 2: Firestore Database
    console.log('üìã Verificando conex√£o com Firestore...')

    if (typeof window.firebaseDb === 'undefined') {
      throw new Error('‚ùå Firestore n√£o foi inicializado')
    }

    const db = window.firebaseDb
    const doc = window.doc
    const getDoc = window.getDoc

    if (typeof doc === 'undefined' || typeof getDoc === 'undefined') {
      throw new Error('‚ùå Fun√ß√µes do Firestore n√£o foram importadas')
    }

    // Tentar ler um documento de teste (n√£o precisa existir)
    const testDocRef = doc(db, 'test-connection', 'test-doc')
    const testDocSnap = await getDoc(testDocRef)

    console.log('‚úÖ Conex√£o com Firestore OK')
    console.log('üìÑ Documento de teste existe:', testDocSnap.exists())

    // Verifica√ß√£o 3: Configura√ß√£o do Firebase
    console.log('üìã Verificando configura√ß√£o do Firebase...')

    if (typeof window.firebaseConfig === 'undefined') {
      throw new Error('‚ùå Configura√ß√£o do Firebase n√£o encontrada')
    }

    const config = window.firebaseConfig
    console.log('‚úÖ Configura√ß√£o do Firebase OK')
    console.log('üîß Project ID:', config.projectId)
    console.log('üîß Auth Domain:', config.authDomain)

    // Verifica√ß√£o 4: Fun√ß√µes de autentica√ß√£o
    console.log('üìã Verificando fun√ß√µes de autentica√ß√£o...')

    const authFunctions = [
      'signInWithEmailAndPassword',
      'signInWithPopup',
      'onAuthStateChanged',
      'signOut'
    ]

    const missingFunctions = authFunctions.filter(
      func => typeof window[func] === 'undefined'
    )

    if (missingFunctions.length > 0) {
      throw new Error(
        '‚ùå Fun√ß√µes de autentica√ß√£o n√£o encontradas: ' +
          missingFunctions.join(', ')
      )
    }

    console.log('‚úÖ Todas as fun√ß√µes de autentica√ß√£o OK')

    // Resumo final
    console.log(
      'üéâ VERIFICA√á√ÉO COMPLETA - Firebase est√° configurado corretamente!'
    )
    console.log('üìä Resumo:')
    console.log('  ‚úÖ Autentica√ß√£o: OK')
    console.log('  ‚úÖ Firestore: OK')
    console.log('  ‚úÖ Configura√ß√£o: OK')
    console.log('  ‚úÖ Fun√ß√µes: OK')

    return {
      success: true,
      auth: true,
      firestore: true,
      config: true,
      functions: true
    }
  } catch (error) {
    console.error('‚ùå ERRO na verifica√ß√£o do Firebase:', error.message)
    console.log('üîß Poss√≠veis solu√ß√µes:')
    console.log('  1. Verifique se o Firebase est√° inicializado corretamente')
    console.log('  2. Confirme se todas as depend√™ncias foram importadas')
    console.log('  3. Verifique se as credenciais est√£o corretas')
    console.log('  4. Certifique-se de que o projeto Firebase existe')

    return {
      success: false,
      error: error.message
    }
  }
}

// Disponibilizar fun√ß√£o globalmente para uso no console
window.checkFirebaseConnection = checkFirebaseConnection

// Fun√ß√£o para verificar se o Firebase est√° configurado
window.verificarFirebase = function () {
  if (window.firebaseAuth && window.firebaseDb) {
    console.log('‚úÖ Firebase configurado corretamente')
    return true
  } else {
    console.log('‚ùå Firebase n√£o configurado')
    return false
  }
}
